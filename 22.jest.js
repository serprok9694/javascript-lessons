// * Тестирование Jest

// Обычно, когда мы пишем функцию, мы легко можем представить, что она должна делать, и
// как она будет вести себя в зависимости от переданных параметров
// Во время разработки мы можем проверить правильность работы функции, просто вызвав ее,
// например, из консоли и сравнить полученный результат с ожидаемым
// При тестировании кода ручными перезапусками легко упустить что-нибудь важное

// Jest - это фреймворк для тестирования JavaScript кода
// Работает с проектами TypeScript, Node, React, Angular, Vue и др.


// sum.js
function sum(a, b) {
  return a + b;
};

module.exports = sum;


// ----------------


// sum.test.js
const sum = require('./sum.js');
test('adds 1 + 2 to equal 3', () => {
  expect(sum(1,2)).toBe(3);
});


//  .toBe() - проверяет на точное равенство
//  .not.toBe() - противоположность равенству


// Jest - логические значения

// .toBeNull()  соответствует только null
// .toBeUndefined() соответствует только undefined
// .toBeDefined()  является противоположностью toBeUndefined
// .toBeTruthy()  соответсвует всему, что if конструкция рассматривает как true
// .toBeFalsy()  соответсвует всему, что if конструкция рассматривает как false


// Jest - числа

// expect(value).toBeGreaterThan(3);  // ожидается value > 3
// expect(value).toBeGreaterThanOrEqual(3.5);  // ожидается value >= 3.5
// expect(value).toBeLessThan(5);     // ожидается value < 5
// expect(value).toBeLessThanOrEqual(4.5);    // ожидается value <= 4.5


// для сопоставления строк с регулярными выражениями, используйте .toMatch
// содержит ли массив или объект конкретное значение, используйте .toContain

